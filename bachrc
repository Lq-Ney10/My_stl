# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias rm='rm -rf'
alias clion=/home/lq/clion/bin/clion.sh


# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"








"默认配置
set shell=/bin/bash
set enc=utf-8
language messages zh_CN.utf-8 
"设置中文帮助
set helplang=cn
"设置为双字宽显示，否则无法完整显示如:☆
set ambiwidth=double "防止特殊符号无法正常显示
":sp filename 在vim中打开一个新窗口
"ctrl + w + 上箭头 : 移动光标到上一个窗口
"ctrl + w + 下箭头 : 移动光标到下一个窗口


"vim-plus
call plug#begin('~/.vim/plugged')
"Plug 'neoclide/coc.nvim', {'branch': 'release'} 
Plug 'preservim/nerdtree'
Plug 'jiangmiao/auto-pairs'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'flazz/vim-colorschemes'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'Yggdroot/LeaderF', {'do': './install.sh'}
call plug#end()





"个人设置
set nocompatible
set t_Co=256
set backspace=indent,eol,start
syntax on   "高亮代码"
set nu                        "显示行号"
"set relativenumber   "以当前行号为基准显示行号"
"set cursorline  "在当前光标位置显示一条线
set tabstop=4                  "tab长度设置为4"
""set softtabstop=4
set shiftwidth=4            "设置缩进空格数为4"
set autoindent           "设置自动缩进，每行缩进值与上一行相等"
set nobackup                "覆盖文件时不备份"
"set cursorline              "突出显示当前行"
set ruler                    "在右下角显示光标位置的状态行"   
set noexpandtab          " 不要用空格代替制表符
set hlsearch                  "搜索逐字符高亮
"set foldmethod=marker        "代码折叠
"set cmdheight             " 命令行（在状态行下）的高度，默认为1，这里是2
set mouse=a                   " 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
set showmatch                 " 高亮显示匹配的括号
set enc=utf-8                 "编码设置
set langmenu=zh_CN.UTF-8      "语言设置
set ambiwidth=double "防止特殊符号无法正常显示
set helpheight=15             "帮助的行高
set helplang=cn               "帮助语言
set fillchars=vert:\ ,stl:\ ,stlnc:\      " 在被分割的窗口间显示空白，便于阅读
set showmatch                 " 高亮显示匹配的括号
set scrolloff=3               " 光标移动到buffer的顶部和底部时保持3行距离
set smartindent               " 为C程序提供自动缩进






"NERDTree配置
nnoremap <C-n> :NERDTreeToggle <CR>
"?: 快速帮助文档
"o: 打开一个目录或者打开文件，创建的是buffer，也可以用来打开书签
"go: 打开一个文件，但是光标仍然留在NERDTree，创建的是buffer
"t: 打开一个文件，创建的是Tab，对书签同样生效
"T: 打开一个文件，但是光标仍然留在NERDTree，创建的是Tab，对书签同样生效
"i: 水平分割创建文件的窗口，创建的是buffer
"gi: 水平分割创建文件的窗口，但是光标仍然留在NERDTree
"s: 垂直分割创建文件的窗口，创建的是buffer
"gs: 和gi，go类似
"x: 收起当前打开的目录
"X: 收起所有打开的目录
"e: 以文件管理的方式打开选中的目录
"D: 删除书签
"P: 大写，跳转到当前根路径
"p: 小写，跳转到光标所在的上一级路径
"K: 跳转到第一个子路径
"J: 跳转到最后一个子路径
"<C-j>和<C-k>: 在同级目录和文件间移动，忽略子目录和子文件
"C: 将根路径设置为光标所在的目录
"u: 设置上级目录为根路径
"U: 设置上级目录为跟路径，但是维持原来目录打开的状态
"r: 刷新光标所在的目录
"R: 刷新当前根路径
"I: 显示或者不显示隐藏文件
""f: 打开和关闭文件过滤器
"q: 关闭NERDTree
"A: 全屏显示NERDTree，或者关闭全屏
"ctrl+w+r 切换当前窗口左右布局
"ctrl+p 模糊搜索文件
"ctrl + w + w: 切换
" 显示行号
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=1





"airline options
"let g:airline_theme="fonts"  
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
"old vim-powerline symbols
 let g:airline_left_sep = '⮀'
 let g:airline_left_alt_sep = '⮁'
 let g:airline_right_sep = '⮂'
 let g:airline_right_alt_sep = '⮃'
 let g:airline_symbols.branch = '⭠'
 let g:airline_symbols.readonly = '⭤'
 let g:airline_symbols.linenr = '⭡'
set laststatus=2	"永远显示状态栏
set t_Co=256     "终端开启256色支持
let g:airline_powerline_fonts = 1 "支持powerline字体
"let g:airline#extensions#tabline#enabled = 1 "显示窗口buffer和tab
let g:airline#extensions#tabline#enabled = 1      "tabline中当前buffer两端的分隔字符
let g:airline#extensions#tabline#left_sep = ' '   "tabline中未激活buffer两端的分隔字符
let g:airline#extensions#tabline#left_alt_sep = '|'      "tabline中buffer显示编号
nnoremap ff :bn<CR>




"auto-pairs配置
let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"'}




"color
syntax enable
colorscheme molokai






"coc.nvim
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
